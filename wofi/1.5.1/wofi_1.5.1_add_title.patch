diff -ruN --label original --label modified  original modified
--- original
+++ modified
@@ -121,6 +121,9 @@
 .TP
 .B \-j, \-\-hide\-search
 Hides the search bar.
+.TP
+.B \-T \-\-title=\fITITLE\fR
+Shows a menu title.
 
 .SH CONFIGURATION
 Wofi has 3 main files used for configuration. All files are completely optional.
diff -ruN --label original --label modified original modified
--- original
+++ modified
@@ -99,6 +99,7 @@
 	printf("--monitor\t\t-o\tSets the monitor to open on\n");
 	printf("--pre-display-cmd\t-r\tRuns command for the displayed entries, without changing the output. %%s for the real string\n");
   	printf("--hide-search\t\t-j\tHides the search bar\n");
+	printf("--title\t\t\t-T\tShows a menu title\n");
 	exit(0);
 }
 
@@ -446,6 +447,12 @@
 			.val = 'j'
 		},
 		{
+			.name = "title",
+			.has_arg = required_argument,
+			.flag = NULL,
+			.val = 'T'
+		},
+		{
 			.name = NULL,
 			.has_arg = 0,
 			.flag = NULL,
@@ -484,13 +491,14 @@
 	char* monitor = NULL;
 	char* pre_display_cmd = NULL;
   	char* hide_search = NULL;
+	char* title = NULL;
 
 	struct wl_list options;
 	wl_list_init(&options);
 	struct option_node* node;
 
 	int opt;
-	while((opt = getopt_long(argc, argv, "hfc:s:C:dS:W:H:p:x:y:nImk:t:P::eEbM:iqvl:aD:L:w:O:GQ:o:r:j", opts, NULL)) != -1) {
+	while((opt = getopt_long(argc, argv, "hfc:s:C:dS:W:H:p:x:y:nImk:t:P::eEbM:iqvl:aD:L:w:O:GQ:o:r:jT:", opts, NULL)) != -1) {
 		switch(opt) {
 		case 'h':
 			print_usage(argv);
@@ -608,6 +616,9 @@
 		case 'j':
 			hide_search = "true";
 			break;
+		case 'T':
+			title = optarg;
+			break;
 		}
 	}
 
@@ -806,6 +817,9 @@
   	if(hide_search != NULL) {
 		map_put(config, "hide_search", hide_search);
 	}
+	if(title != NULL) {
+		map_put(config, "title", title);
+	}
 
 	struct sigaction sigact = {0};
 	sigact.sa_handler = sig;
diff -ruN --label original --label modified  original modified
--- original
+++ modified
@@ -67,7 +67,7 @@
 static uint64_t width, height;
 static char* x, *y;
 static struct zwlr_layer_shell_v1* shell = NULL;
-static GtkWidget* window, *outer_box, *scroll, *entry, *inner_box, *previous_selection = NULL;
+static GtkWidget* window, *outer_box, *scroll, *entry, *inner_box, *previous_selection, *title_label = NULL;
 static gchar* filter = NULL;
 static char* mode = NULL;
 static bool allow_images, allow_markup;
@@ -111,6 +111,7 @@
 static bool pre_display_exec = false;
 static bool single_click = false;
 static bool hide_search = false;
+static char* title = NULL;
 static GdkModifierType shift_mask = GDK_SHIFT_MASK;
 static GdkModifierType ctrl_mask = GDK_CONTROL_MASK;
 static GdkModifierType alt_mask = GDK_MOD1_MASK;
@@ -1826,6 +1827,7 @@
 	pre_display_cmd = map_get(config, "pre_display_cmd");
 	pre_display_exec = strcmp(config_get(config, "pre_display_exec", "false"), "true") == 0;
 	single_click = strcmp(config_get(config, "single_click", "false"), "true") == 0;
+	title = config_get(config, "title", NULL);
 
 	keys = map_init_void();
 	mods = map_init_void();
@@ -2019,6 +2021,12 @@
 	gtk_widget_set_name(outer_box, "outer-box");
 	gtk_container_add(GTK_CONTAINER(window), outer_box);
 
+	if (title) {
+		title_label = gtk_label_new(title);
+		gtk_widget_set_name(title_label, "title");
+		gtk_container_add(GTK_CONTAINER(outer_box), title_label);
+	}
+
 	bool use_search_box = strcmp(config_get(config, "use_search_box", "true"), "true") == 0;
 	if(use_search_box) {
 		entry = gtk_search_entry_new();
